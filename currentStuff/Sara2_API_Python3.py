# create the class for holding all the data associated with each design. 
# use namedtuple for memory for for what is parsed from spreedsheets and 
# fold data generated by nupack as should not change
from decimal import Decimal
from tokenize import Double
from turtle import st
from typing import Dict, NamedTuple, List
from unicodedata import decimal
import pandas as pd
import sys
import openpyxl
from dataclasses import dataclass

#this is the stuff that is generated by Rhijus wet lab
@dataclass
class WetlabData:
    Sequence: str
    Eterna_Score: float
    Baseline_Subscore: float
    Folding_Subscore: float
    Switch_Subscore: float
    Switch_Direction: int
    NumberOfClusters1: int
    FoldChange: float
    FoldChange_err_factor: float
    KDOFF: float
    KDON: float
    ddG: float
    ddG_err: float

#data commonly associated with secondary structures. written with alternate structures in mind
class structureData(NamedTuple):
    secondaryStructure: str
    freeEnergy: float
    deltaMfeEnergy: float  

#this is the data the generated by folding software and in this case it is nupack
class NupackFoldData(NamedTuple):
    temperature: int
    mfeInfo: structureData
    alternateStructureList: List[structureData]
    pairprobsList: List[List[float]]
    #primaryPairsList:list
    #primaryPairsSortedList: list
    #secondaryPairsList: list
    #secondaryPairsSortedList: list

class Oligos(NamedTuple):
    oligoSequence: str
    oligoSequenceLenght:str
    OligoConcentration: str


#entry point for each design in a puzzle/lab
class DesignData(NamedTuple):
    Sequence: str
    Sequence_Length: int
    oligosList: List[Oligos]
    DesignID: int
    Design: str
    Player: str
    wetlabResults: WetlabData
    nupackFoldResults: NupackFoldData

#entry point to puzzle or lab as we call them
class puzzleData(NamedTuple):
    Puzzle_Name: str
    designIdList: List[DesignData]


class RoundData(NamedTuple):
    roundName: str
    roundID: int
    puzzleLabList: List[puzzleData]

       

# for each design entry we make a DesignData object and add that to a Lst once that is done 
# we add it to a puzzleData object and once that is done for all the puzzles we then add it to a round data and wea re finished.
# I think round data should be changable

def GetNamesClass(className):
    members = list(vars(className).keys())
    return members

def openExcelWetlab(path, designRoundSheet):
    #$designRound = "Round 7 (R101)"
    pnasPath = r'pnas.2112979119.sd01.xlsx'
    designRound = "Round 7 (R101)"
    roundData = ['DesignID', 'Design', 'Player', 'Puzzle_Name', 'Eterna_Score', 'FoldChange', 'Sequence']
    sheet = pd.read_excel(path, sheet_name=designRound).itertuples
    return sheet

def GenerateDesignEntry(wetlabLine):
    sheet = openExcelWetlab()

def GenerateWetlabEntry(row):
    wetlab= WetlabData()
    #this is a list of the variable names from the wetlab class
    members = GetNamesClass(WetlabData)
    for variable in members:


def ProcessLab(path, designRound_sheet):
    sheet = openExcelWetlab(path, designRound_sheet)
    #first do the Design entry stuff
    tempDesignDataList = List[DesignData]    
    for row in sheet:
        # this is a single line from teh file and representas a single design. load this into wetlabdata
        # and then do nupack. each row is in a namedtouple formate
        GenerateWetlabEntry(row)
